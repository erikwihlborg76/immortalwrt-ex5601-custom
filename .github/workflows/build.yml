name: immortalwrt-build-ex5601

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      # ---- IMMORTALWRT SOURCE ----
      REPO_URL: "https://github.com/padavanonly/immortalwrt-mt798x-24.10"
      BRANCH: "openwrt-24.10-6.6"

      # ---- TARGET / PROFILE ----
      OWRT_TARGET: "mediatek"
      OWRT_SUBTARGET: "filogic"
      PROFILE: "zyxel_ex5601-t0-ubootmod"

      # Work directory for sources
      WORKDIR: "${{ github.workspace }}/openwrt"

    steps:
      - name: Checkout build repo
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3 python3-distutils rsync unzip zlib1g-dev file wget \
            subversion swig libpython3-dev ccache

      - name: Restore caches (dl, toolchain, ccache)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKDIR }}/dl
            ${{ env.WORKDIR }}/staging_dir
            ~/.ccache
          key: ${{ runner.os }}-immortalwrt-${{ env.BRANCH }}-${{ hashFiles('configs/**/*.config', 'patches/**/*.patch', 'package-patches/**', 'feeds.conf.custom') }}
          restore-keys: |
            ${{ runner.os }}-immortalwrt-${{ env.BRANCH }}-

      - name: Fetch ImmortalWrt sources
        run: |
          git -c advice.detachedHead=false clone \
            --single-branch --branch "${BRANCH}" \
            --depth 1 --filter=blob:none \
            "${REPO_URL}" "${WORKDIR}"

      - name: Optional custom feeds.conf
        if: hashFiles('feeds.conf.custom') != ''
        run: |
          cp feeds.conf.custom "${WORKDIR}/feeds.conf.default"

      - name: Update & install feeds
        run: |
          cd "${WORKDIR}"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Apply tree-level patches (if any)
        if: hashFiles('patches/**/*.patch') != ''
        run: |
          cd "${WORKDIR}"
          for p in "${GITHUB_WORKSPACE}"/patches/*.patch; do
            echo "Applying $(basename "$p")"
            patch -p1 < "$p"
          done

      - name: Apply per-package patches (if any)
        if: hashFiles('package-patches/**') != ''
        run: |
          # Example layout:
          # package-patches/
          #   feeds-packages/net/iperf3/patches/010-fix-xyz.patch
          #   feeds-luci/applications/luci-app-foo/patches/100-bar.patch
          #   package/kernel/mt76/patches/200-baz.patch
          rsync -a "${GITHUB_WORKSPACE}/package-patches/" "${WORKDIR}/" || true

      - name: Inject .config
        run: |
          cd "${WORKDIR}"
          cp "${GITHUB_WORKSPACE}/configs/${PROFILE}.config" .config
          make defconfig

      - name: Overlay files/ (optional)
        run: |
          if [ -d "${GITHUB_WORKSPACE}/files" ]; then
            rsync -a "${GITHUB_WORKSPACE}/files/" "${WORKDIR}/files/"
          fi

      - name: Show version info
        run: |
          cd "${WORKDIR}"
          ./scripts/diffconfig.sh || true
          ./scripts/getver.sh || true

      - name: Build (download first, then compile)
        run: |
          cd "${WORKDIR}"
          make -j"$(nproc)" download
          make -j"$(nproc)" || make -j1 V=s

      - name: Collect artifacts
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/artifacts"
          # Device images
          cp -a "${WORKDIR}/bin/targets/${OWRT_TARGET}/${OWRT_SUBTARGET}/"* \
                "${GITHUB_WORKSPACE}/artifacts/" || true
          # Package repos (userspace + kmods) â€“ handy if you want opkg later
          mkdir -p "${GITHUB_WORKSPACE}/artifacts/packages"
          cp -a "${WORKDIR}/bin/packages" \
                "${GITHUB_WORKSPACE}/artifacts/packages/" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.PROFILE }}
          path: artifacts/
          compression-level: 9
          if-no-files-found: warn

      - name: Create GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          fail_on_unmatched_files: false
